<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class AmoController extends Controller
{
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
     * 
     * @param array $data –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @return bool –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    private function sendToTelegram($data)
    {
        try {
            $botToken = env('TELEGRAM_BOT_TOKEN');
            $chatId = env('TELEGRAM_CHAT_ID');
            
            if (!$botToken || !$chatId) {
                Log::error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID');
                return false;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            $text = "‚ö°Ô∏è –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n";
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            $text .= "üì¶ C–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n";
            if (!empty($data['tarif'])) {
                $text .= "{$data['tarif']} - 1 —à—Ç.\n\n";
            }
            
            // –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            $text .= "üöö –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\n";
            $text .= "‚óè –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è\n";
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            if (!empty($data['address'])) {
                $fullAddress = "–≥–æ—Ä–æ–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, ";
                $fullAddress .= "—É–ª. {$data['address']}, ";
                if (!empty($data['house'])) $fullAddress .= "–¥. {$data['house']}";
                if (!empty($data['entrance'])) $fullAddress .= ", –ø–æ–¥—ä–µ–∑–¥ {$data['entrance']}";
                if (!empty($data['flat'])) $fullAddress .= ", –∫–≤. {$data['flat']}";
                if (!empty($data['floor'])) $fullAddress .= ", —ç—Ç–∞–∂ {$data['floor']}";
            }
            
            if (!empty($data['name'])) $text .= "‚óè –§–ò–û: {$data['name']}\n";
            if (!empty($data['phone'])) $text .= "‚óè –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {$data['phone']}\n";
            if (isset($fullAddress)) $text .= "‚óè –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {$fullAddress}\n\n";
            
            // –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            $text .= "üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n\n";
            if (!empty($data['telegram_username'])) {
                $text .= "‚óè ID [Telegram]: @{$data['telegram_username']}\n";
            }
            if (!empty($data['telegram_user_id'])) {
                $text .= "‚óè ID [–¶–∏—Ñ—Ä–æ–≤–æ–π]: {$data['telegram_user_id']}\n";
            }
            $text .= "‚óè –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 0\n";
            $text .= "‚óè –°–∫–∏–¥–∫–∞ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n";
            $text .= "‚óè –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 0\n";
            $text .= "‚óè –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤: –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n";
            
            // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
            if (!empty($data['comment'])) {
                $text .= "üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ: {$data['comment']}\n\n";
            }
            
            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            if (!empty($data['sum'])) {
                if (!empty($data['discount'])) {
                    $text .= "üí≥ –ò—Ç–æ–≥–æ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ {$data['discount']}‚ÇΩ): {$data['sum']}‚ÇΩ";
                } else {
                    $text .= "üí≥ –ò—Ç–æ–≥–æ (—Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏): {$data['sum']}‚ÇΩ";
                }
            }
            
            // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            $photoPath = public_path('newOrder.jpg');
            if (file_exists($photoPath)) {
                $photoResponse = Http::attach(
                    'photo', 
                    file_get_contents($photoPath), 
                    'newOrder.jpg'
                )->post("https://api.telegram.org/bot{$botToken}/sendPhoto", [
                    'chat_id' => $chatId,
                    'caption' => $text,
                    'parse_mode' => 'HTML'
                ]);

                if ($photoResponse->successful()) {
                    return true;
                }

                // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
                Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram: ' . $photoResponse->body());
            }

            // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            $response = Http::post("https://api.telegram.org/bot{$botToken}/sendMessage", [
                'chat_id' => $chatId,
                'text' => $text,
                'parse_mode' => 'HTML'
            ]);
            if ($response->successful()) {
                return response()->json(['success' => true]);
            }
            
            Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ' . $response->body());
            return response()->json(['success' => false]);
        } catch (\Exception $e) {
            Log::error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
     */
    public function call(Request $request)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        Log::info('Call form data:', $request->all());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        $success = $this->sendToTelegram($request->all());
        
        if ($request->ajax()) {
            return response()->json([
                'success' => $success,
                'message' => $success ? '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'
            ]);
        }
        
        // –î–ª—è –Ω–µ-AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
        if ($success) {
            return redirect()->back()->with('success', '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        } else {
            return redirect()->back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞)
     */
    public function order2(Request $request)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        Log::info('Order2 form data:', $request->all());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        $success = $this->sendToTelegram($request->all());
        
        if ($request->ajax()) {
            return response()->json([
                'success' => $success,
                'message' => $success ? '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω' : '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
            ]);
        }
        
        // –î–ª—è –Ω–µ-AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
        if ($success) {
            return redirect()->back()->with('success', '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
        } else {
            return redirect()->back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∞)
     */
    public function order3(Request $request)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        Log::info('Order3 form data:', $request->all());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        $success = $this->sendToTelegram($request->all());
        
        if ($request->ajax()) {
            return response()->json([
                'success' => $success,
                'message' => $success ? '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω' : '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
            ]);
        }
        
        // –î–ª—è –Ω–µ-AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
        if ($success) {
            return redirect()->back()->with('success', '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
        } else {
            return redirect()->back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
     */
    public function checkPromocode(Request $request)
    {
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return response()->json([
            'success' => true,
            'message' => '–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω',
            'original_price' => 1000,
            'discount' => 150,
            'discounted_price' => 850,
            'discount_text' => '15%'
        ]);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    public function submitOrder(Request $request)
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        Log::info('submitOrder form data:', $request->all());
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        $orderData = session('order_data');
        $promocode = session('promocode');
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
        $data = $request->all();
        $data['form_type'] = '–ó–∞–∫–∞–∑ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã';
        
        if ($orderData) {
            $data['tariff'] = $orderData['tariff_name'] ?? '';
            $data['calories'] = $orderData['calories'] ?? '';
            $data['days'] = $orderData['days'] ?? '';
            $data['price'] = $orderData['price'] ?? '';
        }
        
        if ($promocode) {
            $data['promocode_code'] = $promocode['code'] ?? '';
            $data['discount'] = $promocode['discount'] ?? '';
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        $success = $this->sendToTelegram($data);
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if ($success) {
            session()->forget(['order_data', 'promocode']);
        }
        
        if ($success) {
            return redirect()->route('order.success');
        } else {
            return response()->json([
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
            ]);
        }
    }
} 